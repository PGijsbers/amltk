[project]
name = "byop"
version = "0.0.1"
dependencies = ["typing_extensions"]
requires-python=">=3.8"
authors = [
    {name = "Eddie Bergman", email = "eddiebergmanhs@gmail.com"}
]
readme = "README.md"
description = "Build Your Own Pipeline: a toolkit for building automl system"
classifiers=[
    'Intended Audience :: Science/Research',
    'Intended Audience :: Developers',
    'License :: OSI Approved',
    'Programming Language :: Python',
    'Topic :: Software Development',
    'Topic :: Scientific/Engineering',
    'Operating System :: POSIX',
    'Operating System :: Unix',
    'Operating System :: MacOS',
    'Programming Language :: Python :: 3',
]
license= { file = "LICENSE" }

[project.optional-dependencies]
dev = ["pytest", "pytest-coverage", "scikit-learn", "pandas", "numpy", "pylint", "pre-commit", "pydocstyle", "commitizen"]
smac = ["smac==2.0.0a1", "configspace"]

[project.urls]
documentation = "https://github.com/automl/byop/"
source = "https://github.com/automl/byop/"

[tool.pytest.ini_options]
testpaths = ["tests"]
minversion = "3.8"

[tool.coverage.run]
branch = true
context = "byop"

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    '\.\.\.',
    "raise NotImplementedError",
    "if TYPE_CHECKING"
]

[tool.commitizen]
name = "cz_conventional_commits"
version = "v0.0.1"
tag_format = "v$major.$minor.$patch$prerelease"
update_changelog_on_bump = true
version_files = [
    "pyproject.toml:version",
    "__version__.py"
]

[tool.black]
target-version = ['py38']

[tool.isort]
py_version = "38"
profile = "black" # Play nicely with black
src_paths = ["byop", "tests"]
known_types = ["typing", "abc"] # We put these in their own section TYPES
known_testlibs = ["unittest", "pytest", "pytest_cases"] # Put test libs in their own section
known_first_party = ["byop"] # Say that byop is FIRSTPARTY
known_test = ["tests"] # Say that tests.* is TEST
sections = [
    "FUTURE",
    "TYPES",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "TESTLIBS",
    "TEST",
    "LOCALFOLDER"
] # section ordering
multi_line_output = 3 # https://pycqa.github.io/isort/docs/configuration/multi_line_output_modes.html

[tool.pydocstyle]
convention = "numpy"
add-ignore = [ # http://www.pydocstyle.org/en/stable/error_codes.html
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method

    "D203", # 1 blank line required before class docstring
    "D205", # 1 blank line required between summary and description
    "D210", # No whitespaces allowed surrounding docstring text
    "D212", # Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line

    "D400", # First line should end with a period
    "D401", # First line should be in imperative mood
    "D404", # First word of the docstring should not be "This"
    "D413", # Missing blank line after last section
    "D415"  # First line should end with a period, question mark, or exclamation point
]

[tool.mypy]
python_version = "3.8"

show_error_codes = true

warn_unused_configs = true  # warn about unused [tool.mypy] lines

follow_imports = "normal" # Type check top level api code we use from imports
ignore_missing_imports = false # prefer explicit ignores

disallow_untyped_defs = true # All functions must have types
disallow_untyped_decorators = true # ... even decorators
disallow_incomplete_defs = true # ...all types

enable_recursive_aliases = true


[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false  # Sometimes we just want to ignore verbose types
disallow_untyped_decorators = false # Test decorators are not properly typed
disallow_incomplete_defs = false  # Sometimes we just want to ignore verbose types

[[tool.mypy.overrides]]
module = ["sklearn.*", "ConfigSpace.*"]
ignore_missing_imports = true


[tool.pylint.messages_control]
disable = ["missing-module-docstring", "too-few-public-methods", "missing-class-docstring", "unnecessary-ellipsis", "invalid-name", "no-else-return", "wrong-import-order", "undefined-variable", "wrong-import-position", "unnecessary-lambda-assignment", "missing-function-docstring"]
