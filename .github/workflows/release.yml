# Whenever we have a prerelease, we want to:
# * Build the sdist and attach it to the release.
# * Ensure that the docs will build.
# This should be triggered from the cmdline with `just prerelease`.
# Could also be triggered from the release page.
name: release
on:
  workflow_dispatch:
permissions:
  contents: write
jobs:
  test-code:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
      - run: python -m pip install ".[dev]"
      - run: pytest ${{ env.test-dir }}
  test-docs:
    needs: [test-code]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
      - run: python -m pip install ".[dev]"
      - run: mkdocs build --clean --strict
  bump-and-build:
    runs-on: ubuntu-latest
    needs: [test-code, test-docs]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
      - name: "Version Bump"
        run: |
          python -m pip install commitizen
          cz bump
      - run: python -m pip install build
      - run: python -m build --sdist
      - name: "Push Bumped Version"
        run: |
          git push
          git push origin "v$(cz version --project)"
      - name: Store the distribution packages
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
  release:
    needs: [bump-and-build]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/amltk
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
            name: python-package-distributions
            path: dist/
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
      - name: "Create Github Release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create  \
            --generate-notes \
            --prerelease \
            --verify-tag \
            ${{ github.event.release.tag_name }} "dist/*.tar.gz"
  deploy-docs:
    needs: [release]  # Only deploy docs if there is a released version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
      - run: python -m pip install ".[dev]"
      - name: "Build and Deploy Docs"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_tag="$(git tag | sort --version-sort | tail -n1)"
          current_version="${{ github.event.release.tag_name }}"

          # Deploy this verison at any rate
          if [ "$latest_tag" == "$current_version" ]; then
            mike deploy \
              --push \
              --title "${current_version} (latest)" \
              --update-aliases
              "${current_version}" \
              "latest"
          else
            mike deploy --push "${current_version}"
          fi
